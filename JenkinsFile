pipeline {
	agent { label 'windows' }
    parameters {
			string(name: 'aws_profile', defaultValue: 'aws-test', description: 'Provide aws profile')
			string(name: 'aws_region', defaultValue: 'us-west', description: 'Provide aws region')
			//gitParameter branchFilter: 'origin/(.*)', defaultValue: 'master', name: 'BRANCH', type: 'PT_BRANCH'
            choice(name: 'build_type', choices:['Debug'], description: 'Build a Release or Debug version')
	}
	stages {
		stage('Output Current Build Information') {
			steps {
				script {
					currentBuild.description = """ Profile: ${params.aws_profile} Branch: ${params.BRANCH} Region: ${params.aws_region} """
				}
		        bat "\"${tool 'msbuild'}\" -version"
			}
		}
        // stage('Assume Role') {
        //     steps {
        //         script {
        //             wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
        //                 assume_role.assume_role(params.aws_profile)
        //             }
        //         }
        //     }
        // }


		stage('Build') {
			steps {

				bat "IF EXIST \"c:/build/sampleapp\" RMDIR /S /Q \"c:/build/sampleapp\""

				// Download nuget packages
				bat 'nuget restore sample-dotnetframework-app/SampleNetApp/SampleApplication.sln'
			
				// Build the solution
		        bat "\"${tool 'msbuild'}\" sample-dotnetframework-app/SampleNetApp/SampleApplication.sln /nr:false /m /p:OutDir=c:\\build\\sampleapp /p:Configuration=Debug /p:Platform=\"Any CPU\" /p:ProductVersion=1.0.0.${env.BUILD_NUMBER} /p:GenerateBuildInfoConfigFile=false /p:GenerateProjectSpecificOutputFolder=True /p:SkipInvalidConfigurations=true /p:langversion=latest"

 				//Move C# aspx pages to new location
                powershell "Move-Item -Path 'C:/build/sampleapp/SampleApplication-Web/_PublishedWebsites/SampleApplication-Web' -Destination 'C:/build/sampleapp/_PublishedWebsites' -Recurse"
                // // Combine bin directories
                // powershell "Copy-Item -Path 'Website/SCIWebsite/Bin/SCIWebsite/_PublishedWebsites/SCIWebsite/SCI.Framework.Web/Bin' -Destination 'Website/SCIWebsite/Bin/SCIWebsite/_PublishedWebsites/SCIWebsite' -force"
                
			}
		}

		stage('Upload') {
            steps {
                // Remove *.pdb
                powershell "Get-ChildItem 'C:/build/sampleapp/SampleApplication-Web/_PublishedWebsites/SampleApplication-Web/bin' -filter '*.pdb' | Remove-Item -force"
                // Create zip for deployment
				powershell "C:/jenkins/workspace/pipeline/tools/7z.exe a -tzip -r SCI.Website.zip 'C:/build/sampleapp/SampleApplication-Web/_PublishedWebsites/SampleApplication-Web/**' "
                // Upload files
                // withCredentials([string(credentialsId: 's3-sci-stg-kms-id', variable: 'Secret')]) {
                //     powershell """aws s3 cp SCI.Website.zip s3://sci-stg/Web/${params.BRANCH}/SCI.Website.zip --sse aws:kms --sse-kms-key-id ${Secret} --profile aws-nonprod"""
                //  }
            }
        }
		
	
	}

	post {
		always {
			echo 'testing'
		}
		success {
			echo 'successful run :)'
		}
		failure {
			echo 'Failure :('
		}
		unstable {
			echo 'unstable :O'
		}
		changed {
			echo 'chaned :]'
		}
	
	}
}